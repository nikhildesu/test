html

<div class="dashboard">
  <div class="header">
    <h2>Advisor One Application Monitoring</h2>
    <button (click)="runHealthCheck()">RUN HEALTH CHECK</button>
    <div class="overall-health">Overall Health: <span class="healthy">HEALTHY [100%]</span></div>
  </div>

  <div class="grid">
    <div class="category" *ngFor="let category of healthCategories">
      <h3>{{ category.title }} <span class="percentage">100%</span></h3>

      <div class="table">
        <div class="table-header">
          <div>Name</div>
          <div>Status</div>
          <div>Retry</div>
        </div>
        <div class="table-row" *ngFor="let item of category.items">
          <div class="item-name">{{ item.name }}</div>
          <div class="status" [ngClass]="item.status">{{ item.status }}</div>
          <div>
            <button class="retry-btn" (click)="retry(item)">‚ü≥</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


  component

  import { Component } from '@angular/core';

interface HealthItem {
  name: string;
  status: 'SUCCESS' | 'FAILED';
}

interface HealthCategory {
  title: string;
  items: HealthItem[];
}

@Component({
  selector: 'app-health-dashboard',
  templateUrl: './health-dashboard.component.html',
  styleUrls: ['./health-dashboard.component.scss']
})
export class HealthDashboardComponent {
  healthCategories: HealthCategory[] = [
    {
      title: 'Login & Impersonation',
      items: [
        { name: 'LOGIN', status: 'SUCCESS' },
        { name: 'IMPERSONATION', status: 'SUCCESS' },
        { name: 'ADVISORS LIST', status: 'SUCCESS' }
      ]
    },
    {
      title: 'Admin Actions',
      items: [
        { name: 'CLIENT/ACCOUNT SEARCH', status: 'SUCCESS' },
        { name: 'FEATURE FLAGS', status: 'SUCCESS' },
        { name: 'NOTIFICATIONS', status: 'SUCCESS' }
      ]
    },
    // Add other categories similarly...
  ];

  retry(item: HealthItem) {
    console.log('Retrying:', item.name);
    // simulate retry logic
    item.status = 'SUCCESS';
  }

  runHealthCheck() {
    console.log('Running overall health check...');
  }
}


css
.dashboard {
  font-family: Arial, sans-serif;
  padding: 20px;
  background-color: #f8f9fa;

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    margin-bottom: 30px;

    h2 {
      flex: 1;
      font-size: 20px;
    }

    button {
      background-color: #007bff;
      border: none;
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
    }

    .overall-health {
      font-weight: bold;
      .healthy {
        color: #28a745;
        background-color: #e6f4ea;
        padding: 4px 8px;
        border-radius: 4px;
      }
    }
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;

    .category {
      background: #ffffff;
      padding: 16px;
      border-radius: 8px;
      border: 1px solid #ddd;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

      h3 {
        display: flex;
        justify-content: space-between;
        font-size: 16px;
        margin-bottom: 12px;
      }

      .table {
        display: table;
        width: 100%;

        .table-header,
        .table-row {
          display: table-row;
        }

        .table-header > div,
        .table-row > div {
          display: table-cell;
          padding: 6px 8px;
          border-bottom: 1px solid #e0e0e0;
        }

        .table-header {
          font-weight: bold;
          background-color: #f1f1f1;
        }

        .status.SUCCESS {
          color: green;
          font-weight: 600;
        }

        .status.FAILED {
          color: red;
          font-weight: 600;
        }

        .retry-btn {
          background: none;
          border: none;
          cursor: pointer;
          color: #007bff;
          font-size: 16px;
        }
      }
    }
  }
}


progessive messge
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-progress-loader',
  templateUrl: './progress-loader.component.html',
})
export class ProgressLoaderComponent implements OnInit {
  messages = ['Loading...', 'Almost there...', 'Drawing...', 'Finalizing...', 'Done!'];
  currentMessage = '';
  private intervalId: any;
  private messageIndex = 0;

  ngOnInit(): void {
    this.startProgressMessages();
  }

  startProgressMessages(): void {
    this.currentMessage = this.messages[0];
    this.messageIndex = 1;

    this.intervalId = setInterval(() => {
      if (this.messageIndex < this.messages.length) {
        this.currentMessage = this.messages[this.messageIndex];
        this.messageIndex++;
      } else {
        clearInterval(this.intervalId);
      }
    }, 3000); // every 3 seconds
  }
}


